const ethers = require("ethers")
const fs = require("fs-extra")
// synchronous [solidity]
// asynchrounous [javascript]
require("dotenv").config()

// import {ethers} from "ethers"
// import * as fs from "fs-extra"
// import "dotenv/config"

async function main() {
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)
  // const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
  // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
  //   encryptedJson,
  //   process.env.PRIVATE_KEY_PASSWORD
  // );
  // wallet = await wallet.connect(provider);
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8")
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  )
  // Using contract file..
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
  console.log("Deploying, please wait...")
  const contract = await contractFactory.deploy() // Stop here! wait for contract to deploy!!
  const deploymentReceipt = await contract.deployTransaction.wait(1)
  console.log("Here is the deployment transaction (transaction response): ")
  console.log(contract.deployTransaction)
  console.log("Here is the transaction receipt: ")
  console.log(deploymentReceipt)

  // Using pure js to deploy contract

  // console.log("Let's deploy with only transaction data");
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 6721975,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b50610a4a806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636057361d1161005b5780636057361d146100dc5780636f760f41146100f85780638bab8dd5146101145780639e7a13ad146101445761007d565b806324422d5a146100825780632e64cec1146100a0578063471f7cdf146100be575b600080fd5b61008a610175565b6040516100979190610367565b60405180910390f35b6100a861017b565b6040516100b59190610367565b60405180910390f35b6100c6610184565b6040516100d39190610367565b60405180910390f35b6100f660048036038101906100f191906103c2565b61018a565b005b610112600480360381019061010d9190610454565b610194565b005b61012e600480360381019061012991906105f5565b610264565b60405161013b9190610367565b60405180910390f35b61015e600480360381019061015991906103c2565b610292565b60405161016c9291906106bd565b60405180910390f35b60015481565b60008054905090565b60005481565b8060008190555050565b6002604051806040016040528083815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908161023791906108f9565b505050806003848460405161024d9291906109fb565b908152602001604051809103902081905550505050565b6003818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600281815481106102a257600080fd5b90600052602060002090600202016000915090508060000154908060010180546102cb9061071c565b80601f01602080910402602001604051908101604052809291908181526020018280546102f79061071c565b80156103445780601f1061031957610100808354040283529160200191610344565b820191906000526020600020905b81548152906001019060200180831161032757829003601f168201915b5050505050905082565b6000819050919050565b6103618161034e565b82525050565b600060208201905061037c6000830184610358565b92915050565b6000604051905090565b600080fd5b600080fd5b61039f8161034e565b81146103aa57600080fd5b50565b6000813590506103bc81610396565b92915050565b6000602082840312156103d8576103d761038c565b5b60006103e6848285016103ad565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610414576104136103ef565b5b8235905067ffffffffffffffff811115610431576104306103f4565b5b60208301915083600182028301111561044d5761044c6103f9565b5b9250929050565b60008060006040848603121561046d5761046c61038c565b5b600084013567ffffffffffffffff81111561048b5761048a610391565b5b610497868287016103fe565b935093505060206104aa868287016103ad565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610502826104b9565b810181811067ffffffffffffffff82111715610521576105206104ca565b5b80604052505050565b6000610534610382565b905061054082826104f9565b919050565b600067ffffffffffffffff8211156105605761055f6104ca565b5b610569826104b9565b9050602081019050919050565b82818337600083830152505050565b600061059861059384610545565b61052a565b9050828152602081018484840111156105b4576105b36104b4565b5b6105bf848285610576565b509392505050565b600082601f8301126105dc576105db6103ef565b5b81356105ec848260208601610585565b91505092915050565b60006020828403121561060b5761060a61038c565b5b600082013567ffffffffffffffff81111561062957610628610391565b5b610635848285016105c7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561067857808201518184015260208101905061065d565b60008484015250505050565b600061068f8261063e565b6106998185610649565b93506106a981856020860161065a565b6106b2816104b9565b840191505092915050565b60006040820190506106d26000830185610358565b81810360208301526106e48184610684565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061073457607f821691505b602082108103610747576107466106ed565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026107af7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610772565b6107b98683610772565b95508019841693508086168417925050509392505050565b6000819050919050565b60006107f66107f16107ec8461034e565b6107d1565b61034e565b9050919050565b6000819050919050565b610810836107db565b61082461081c826107fd565b84845461077f565b825550505050565b600090565b61083961082c565b610844818484610807565b505050565b5b818110156108685761085d600082610831565b60018101905061084a565b5050565b601f8211156108ad5761087e8161074d565b61088784610762565b81016020851015610896578190505b6108aa6108a285610762565b830182610849565b50505b505050565b600082821c905092915050565b60006108d0600019846008026108b2565b1980831691505092915050565b60006108e983836108bf565b9150826002028217905092915050565b6109028261063e565b67ffffffffffffffff81111561091b5761091a6104ca565b5b610925825461071c565b61093082828561086c565b600060209050601f8311600181146109635760008415610951578287015190505b61095b85826108dd565b8655506109c3565b601f1984166109718661074d565b60005b8281101561099957848901518255600182019150602085019450602081019050610974565b868310156109b657848901516109b2601f8916826108bf565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006109e283856109cb565b93506109ef838584610576565b82840190509392505050565b6000610a088284866109d6565b9150819050939250505056fea2646970667358221220177e14f5ac81acd6a4d49238f8ab4e53a2035461322314d1b10cfedeae44555964736f6c63430008100033",
  //   chainId: 1337,
  // };
  // const signedTxResponse = await wallet.signTransaction(tx);
  // console.log(signedTxResponse);
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // console.log(sentTxResponse);

  const currentFavoriteNumber = await contract.retrieve() // view functuion doesn't cost any gas..
  console.log(`Current Favorite Number : ${currentFavoriteNumber.toString()}`)

  const transactionResponse = await contract.store("7") // pass as string and cost gas
  const transactionReceipt = await transactionResponse.wait(1)
  console.log(`Contract Address: ${contract.address}`)
  const updatedFavoriteNumber = await contract.retrieve()
  console.log(`Updated Favorite Number : ${updatedFavoriteNumber.toString()}`)
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })
